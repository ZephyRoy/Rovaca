include(version)
generate_version()

add_subdirectory(common)
add_subdirectory(IOStream)
add_subdirectory(rovaca_logger)
add_subdirectory(haplotypecaller)

set(PACK_NAME main)
set(PACK_SRC rovaca_main.h rovaca_main.cpp)
set(PACK_INCLUDE_DIR IOStream ${Boost_INCLUDE_DIRS} ${HTSLIB_INCLUDE_DIR} ${SPDLOG_INCLUDE_DIR} rovaca_logger)
set(PACK_LINK_DIR ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
set(PACK_LINK_LIB IOStream haplotypecaller logger)
set(PACK_LINK_OPT "-Wl,--no-as-needed")

if(DEFINED BOOST_PATH)
    message(STATUS "Using custom boost")
    set(LIB_PATH ${CMAKE_SOURCE_DIR})
    find_library(BOOST_PROGRAM_OPTIONS_LIB NAMES libboost_program_options.so.1.83.0 PATHS ${LIB_PATH})
    if(NOT BOOST_PROGRAM_OPTIONS_LIB)
        message(FATAL_ERROR "boost_program_options-1.83.0 not found")
    endif()
    set(PACK_LINK_DIR ${PACK_LINK_DIR} ${LIB_PATH})
    set(PACK_LINK_LIB ${PACK_LINK_LIB} ${LIB_PATH}/libboost_program_options.so.1.83.0)
    set(Boost_PROGRAM_OPTIONS_LIBRARY_RELEASE ${LIB_PATH}/libboost_program_options.so.1.83.0)
else()
    message("Using system boost")
    set(Boost_USE_MULTITHREADED OFF)
    find_package(Boost ${MIN_BOOST_VERSION} REQUIRED COMPONENTS program_options)
    if(NOT Boost_PROGRAM_OPTIONS_FOUND)
        message(FATAL_ERROR "can not find program_options library")
    endif()
    set(PACK_LINK_DIR ${PACK_LINK_DIR} ${Boost_LIBRARY_DIRS})
    set(PACK_LINK_LIB ${PACK_LINK_LIB} ${Boost_LIBRARIES})
endif()

add_library(${PACK_NAME} SHARED ${PACK_SRC})
target_include_directories(${PACK_NAME} PRIVATE ${PACK_INCLUDE_DIR})
target_link_directories(${PACK_NAME} PRIVATE ${PACK_LINK_DIR})
target_link_libraries(${PACK_NAME} PRIVATE ${PACK_LINK_LIB})
target_link_options(${PACK_NAME} PRIVATE ${PACK_LINK_OPT})

add_executable(${PROJECT_NAME} main.cpp)
target_link_libraries(${PROJECT_NAME} PRIVATE main)

if(ENABLE_ASAN)
    include(asan)
    enable_sanitizer(${PACK_NAME})
endif()

if(ENABLE_GCOV)
    include(gcov)
    enable_gcov(${PACK_NAME})
endif()

install(TARGETS ${PACK_NAME} LIBRARY DESTINATION lib ARCHIVE DESTINATION lib RUNTIME DESTINATION lib)
install(TARGETS ${PROJECT_NAME} LIBRARY DESTINATION lib ARCHIVE DESTINATION lib RUNTIME DESTINATION lib)
install(FILES ${Boost_PROGRAM_OPTIONS_LIBRARY_RELEASE} DESTINATION lib)
