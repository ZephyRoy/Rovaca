#include "ActiveRegionEngine.h"
#include "HcActiveBase.h"
#include "fasta_loader.h"
#include "htslib/faidx.h"
#include "htslib/sam.h"
// #include "gmock/gmock.h"
#include "gtest/gtest.h"
// using ::testing::ElementsAre;

TEST(ActiveRegionGaussian, testcase1)
{
    ActiveRegionEngine obj(50, 250, 1, 1.0, nullptr, nullptr);

    std::vector<double> expected_values({0.2740686, 0.4518628, 0.2740686});
    auto kernel = obj.get_gaussian_kernel();
    ASSERT_EQ(kernel.size(), expected_values.size());

    for (size_t i = 0; i < kernel.size(); i++) {
        EXPECT_NEAR(kernel[i], expected_values[i], 1e-3);
    }
}

TEST(ActiveRegionGaussian, testcase2)
{
    ActiveRegionEngine obj(50, 250, 2, 1.0, nullptr, nullptr);

    std::vector<double> expected_values({0.05448868, 0.24420134, 0.40261995, 0.24420134, 0.05448868});
    auto kernel = obj.get_gaussian_kernel();
    ASSERT_EQ(kernel.size(), expected_values.size());

    for (size_t i = 0; i < kernel.size(); i++) {
        EXPECT_NEAR(kernel[i], expected_values[i], 1e-8);
    }
}

TEST(ActiveRegionGaussian, testHC)
{
    ActiveRegionEngine obj(50, 300, nullptr, nullptr);
    std::vector<double> expected_values(
        {0.0003113979688636197, 0.0003695743779363655, 0.00043710440639853327, 0.0005151880318395015,  0.000605122912391643,
         0.0007083023458804328, 0.000826211078204079,  0.0009604186802404194,  0.0011125702278070861,  0.0012843740449379633,
         0.0014775863078877348, 0.0016939923564660605, 0.0019353846208172295,  0.00220353714547262,    0.0025001767778131388,
         0.0028269511838710203, 0.0031853939590090656, 0.0035768872122144448,  0.004002622117757181,   0.00446355804350252,
         0.004960380977495009,  0.00549346207945959,   0.006062817277264955,   0.006668068905750599,   0.007308410442291151,
         0.007982575425976569,  0.008688811651690668,  0.00942486170367851,    0.010187950833235364,   0.010974783090745665,
         0.011781546493399608,  0.01260392784770101,   0.01343713765282943,    0.014275945290811824,   0.01511472446733089,
         0.015947508609038718,  0.016768055656640465,  0.01756992142572778,    0.01834654044786116,    0.019091312961429626,
         0.019797696503955884,  0.02045930037292192,   0.021069981078237335,   0.021623936812431792,   0.022115798919401578,
         0.022540718352323824,  0.02289444517759802,   0.023173399303884047,   0.02337473079101619,    0.0234963683184038,
         0.023537054660312782,  0.0234963683184038,    0.02337473079101619,    0.023173399303884047,   0.02289444517759802,
         0.022540718352323824,  0.022115798919401578,  0.021623936812431792,   0.021069981078237335,   0.02045930037292192,
         0.019797696503955884,  0.019091312961429626,  0.01834654044786116,    0.01756992142572778,    0.016768055656640465,
         0.015947508609038718,  0.01511472446733089,   0.014275945290811824,   0.01343713765282943,    0.01260392784770101,
         0.011781546493399608,  0.010974783090745665,  0.010187950833235364,   0.00942486170367851,    0.008688811651690668,
         0.007982575425976569,  0.007308410442291151,  0.006668068905750599,   0.006062817277264955,   0.00549346207945959,
         0.004960380977495009,  0.00446355804350252,   0.004002622117757181,   0.0035768872122144448,  0.0031853939590090656,
         0.0028269511838710203, 0.0025001767778131388, 0.00220353714547262,    0.0019353846208172295,  0.0016939923564660605,
         0.0014775863078877348, 0.0012843740449379633, 0.0011125702278070861,  0.0009604186802404194,  0.000826211078204079,
         0.0007083023458804328, 0.000605122912391643,  0.0005151880318395015,  0.00043710440639853327, 0.0003695743779363655,
         0.000311397968863619});
    auto kernel = obj.get_gaussian_kernel();

    ASSERT_EQ(kernel.size(), expected_values.size());

    for (size_t i = 0; i < kernel.size(); i++) {
        EXPECT_NEAR(kernel[i], expected_values[i], 1e-8);
    }
}

TEST(AcitveRegionRingBuffer, test_all)
{
    AcitveRegionRingBuffer buffer;
    int tid = 0;
    hts_pos_t pos = 0;
    double value;

    buffer.increase_likelihood(0, 0, 1.0);
    buffer.increase_likelihood(0, 0, 1.0);

    /*加两次，防止在最后的插入*/
    for (pos = 1; pos < 1023; pos++) {
        buffer.increase_likelihood(0, pos, 0.001 * pos);
    }
    for (pos = 1; pos < 1023; pos++) {
        buffer.increase_likelihood(0, pos, 0.001 * pos);
    }
    EXPECT_TRUE(buffer.check_site_is_overflow(0, 1023));
    EXPECT_TRUE(buffer.check_site_is_overflow(1, 12));

    EXPECT_TRUE(buffer.pop_front(tid, pos, value));
    EXPECT_EQ(tid, 0);
    EXPECT_EQ(pos, 0);
    EXPECT_EQ(value, 2.0);
    for (int i = 1; i < 1023; i++) {
        EXPECT_TRUE(buffer.pop_front(tid, pos, value));
        EXPECT_EQ(value, 0.002 * pos);
        EXPECT_EQ(tid, 0);
        EXPECT_EQ(pos, i);
    }
    EXPECT_FALSE(buffer.pop_front(tid, pos, value));
    for (pos = 0; pos < 1023; pos++) {
        buffer.increase_likelihood(0, pos + 1023, 0);
    }
    EXPECT_TRUE(buffer.check_site_is_overflow(0, 2046));
    EXPECT_FALSE(buffer.check_site_is_overflow(0, 2045));

    // 看是否都置为0了
    for (int i = 0; i < 1023; i++) {
        EXPECT_TRUE(buffer.pop_front(tid, pos, value));
        EXPECT_EQ(value, 0);
        EXPECT_EQ(tid, 0);
        EXPECT_EQ(pos, 1023 + i);
    }
}

TEST(FIND_BEST_SUITE, case1)
{
    ActiveRegionEngine engine(5, 10, nullptr, nullptr);
    std::vector<double> input_value({0.1, 0.1, 0.1, 0.1, 0.1, 0.05, 0.04, 0.04, 0.1, 0.1});

    hts_pos_t pos = 0;
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    for (auto value : input_value) {
        ring_buffer.increase_likelihood(0, pos, value);
        pos++;
    }
    EXPECT_EQ(engine.find_best_suite(0, pos - 1), 6);
}

TEST(FIND_BEST_SUITE, case2)
{
    ActiveRegionEngine engine(5, 10, nullptr, nullptr);
    std::vector<double> input_value({0.1, 0.1, 0.1, 0.1, 0.03, 0.05, 0.04, 0.04, 0.1, 0.1});

    hts_pos_t pos = 0;
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    for (auto value : input_value) {
        ring_buffer.increase_likelihood(0, pos, value);
        pos++;
    }
    EXPECT_EQ(engine.find_best_suite(0, pos - 1), 4);
}

TEST(FIND_BEST_SUITE, case3)
{
    ActiveRegionEngine engine(5, 10, nullptr, nullptr);
    std::vector<double> input_value({0.1, 0.1, 0.1, 0.1, 0.03, 0.025, 0.024, 0.023, 0.022, 0.021});

    hts_pos_t pos = 0;
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    for (auto value : input_value) {
        ring_buffer.increase_likelihood(0, pos, value);
        pos++;
    }
    EXPECT_EQ(engine.find_best_suite(0, pos - 1), 9);
}

TEST(TestHCActiveBaseWGS, pop_active_region_case1)
{
    ActiveRegionEngine engine(5, 10, nullptr, nullptr);
    std::vector<double> input_value({0.1, 0.1, 0.1, 0.1, 0.03, 0.05, 0.04, 0.04, 0.1, 0.1, 0.1});
    hts_pos_t pos = 0;
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    for (auto value : input_value) {
        ring_buffer.increase_likelihood(0, pos, value);
        pos++;
    }
    ActiveRegionIndexRecord& record = engine.get_record_stauts();
    record.extension_pos = pos - 1;

    engine.pop_active_region();
    engine.dummy_set_finish();
    p_hc_region_active_storage region = engine.poll();
    EXPECT_EQ(region->active, 1);
    EXPECT_EQ(region->tid, 0);
    EXPECT_EQ(region->start_index, 0);
    EXPECT_EQ(region->end_index, 4);
    free(region);

    region = engine.poll();
    EXPECT_EQ(region->active, 1);
    EXPECT_EQ(region->tid, 0);
    EXPECT_EQ(region->start_index, 5);
    EXPECT_EQ(region->end_index, 10);
    free(region);
}

TEST(TestHCActiveBaseWGS, pop_active_region_case2)
{
    ActiveRegionEngine engine(5, 10, nullptr, nullptr);
    std::vector<double> input_value({0.1, 0.01, 0.001, 0.001, 0.001, 0.05, 0.04, 0.04, 0.001, 0.001, 0.001});

    hts_pos_t pos = 0;
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    for (auto value : input_value) {
        ring_buffer.increase_likelihood(0, pos, value);
        pos++;
    }
    ActiveRegionIndexRecord& record = engine.get_record_stauts();
    record.extension_pos = pos - 1;
    engine.pop_active_region();
    engine.dummy_set_finish();
    p_hc_region_active_storage region = engine.poll();
    EXPECT_EQ(region->active, 1);
    EXPECT_EQ(region->tid, 0);
    EXPECT_EQ(region->start_index, 0);
    EXPECT_EQ(region->end_index, 1);
    free(region);
    region = engine.poll();
    EXPECT_EQ(region->active, 0);
    EXPECT_EQ(region->tid, 0);
    EXPECT_EQ(region->start_index, 2);
    EXPECT_EQ(region->end_index, 4);
    free(region);
    region = engine.poll();
    EXPECT_EQ(region->active, 1);
    EXPECT_EQ(region->tid, 0);
    EXPECT_EQ(region->start_index, 5);
    EXPECT_EQ(region->end_index, 7);
    free(region);
    region = engine.poll();
    EXPECT_EQ(region->active, 0);
    EXPECT_EQ(region->tid, 0);
    EXPECT_EQ(region->start_index, 8);
    EXPECT_EQ(region->end_index, 10);
    free(region);
}
TEST(TestHCActiveBaseWGS, pop_active_region_case3)
{
    ActiveRegionEngine engine(5, 10, nullptr, nullptr);
    std::vector<double> input_value({0.1, 0.1, 0.1, 0.1, 0.03, 0.025, 0.024, 0.023, 0.022, 0.021, 0.0001, 0.0001});
    hts_pos_t pos = 0;
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    for (auto value : input_value) {
        ring_buffer.increase_likelihood(0, pos, value);
        pos++;
    }
    ActiveRegionIndexRecord& record = engine.get_record_stauts();
    record.extension_pos = pos - 1;
    engine.pop_active_region();
    engine.dummy_set_finish();
    p_hc_region_active_storage region = engine.poll();
    EXPECT_EQ(region->active, 1);
    EXPECT_EQ(region->tid, 0);
    EXPECT_EQ(region->start_index, 0);
    EXPECT_EQ(region->end_index, 9);
    free(region);
    region = engine.poll();
    EXPECT_EQ(region->active, 0);
    EXPECT_EQ(region->tid, 0);
    EXPECT_EQ(region->start_index, 10);
    EXPECT_EQ(region->end_index, 11);
    free(region);
}

TEST(TestHCActiveBaseWES, bedcase1)
{
    contig_info_t fasta_info;
    FastaLoader::get_fasta_dict(std::string("/data/pipelines/WGS_bgionline/db/GRCh37/ref/GRCh37_no_alt.fna"), &fasta_info);
    BedLoader bed_loader(std::string("/home/yinlonghui/workspace/hc/src/haplotypecaller/ActiveRegion/test/Resource/a.bed"), 0, fasta_info);
    ActiveRegionEngine engine(5, 10, &bed_loader, &fasta_info);

    for (hts_pos_t pos = 0; pos < 2; pos++) EXPECT_FALSE(engine.check_in_target(0, pos));
    for (hts_pos_t pos = 2; pos < 3; pos++) EXPECT_TRUE(engine.check_in_target(0, pos));
    for (hts_pos_t pos = 3; pos < 10; pos++) EXPECT_FALSE(engine.check_in_target(0, pos));
    for (hts_pos_t pos = 10; pos < 11; pos++) EXPECT_TRUE(engine.check_in_target(0, pos));
    for (hts_pos_t pos = 11; pos < 20; pos++) EXPECT_FALSE(engine.check_in_target(0, pos));
    for (hts_pos_t pos = 0; pos < 20; pos++) EXPECT_FALSE(engine.check_in_target(1, pos));
    for (hts_pos_t pos = 0; pos < 10; pos++) EXPECT_FALSE(engine.check_in_target(2, pos));
    for (hts_pos_t pos = 10; pos < 20; pos++) EXPECT_TRUE(engine.check_in_target(2, pos));
    for (hts_pos_t pos = 20; pos < 30; pos++) EXPECT_FALSE(engine.check_in_target(2, pos));
}
static constexpr size_t s_max_bufer_size = 1024 * 1024 * 20;

typedef std::pmr::memory_resource MemoryPool, *pMemoryPool;

// TEST for incoporate func

class TestHCActiveBaseExtensionSuite1 : public ::testing::Test
{
protected:
    static uint8_t* _buffer;
    static pMemoryPool _pool;
    static char* ref;
    static int ref_len;
    static void SetUpTestSuite()
    {
        faidx_t* fai = fai_load("/data/pipelines/WGS_bgionline/db/GRCh37/ref/GRCh37_no_alt.fna");
        ref_len = faidx_seq_len(fai, "chr22");
        int len = 0;
        ref = faidx_fetch_seq(fai, "chr22", 0, ref_len, &len);

        _buffer = new uint8_t[s_max_bufer_size]{};
        _pool = new std::pmr::monotonic_buffer_resource(_buffer, s_max_bufer_size, std::pmr::null_memory_resource());
        fai_destroy(fai);
    }

    static void TearDownTestSuite()
    {
        delete _pool;
        delete[] _buffer;
    }
    void SetUp() override
    {
        FastaLoader::get_fasta_dict(std::string("/data/pipelines/WGS_bgionline/db/GRCh37/ref/GRCh37_no_alt.fna"), &fasta_info);
        _bit = new boost::dynamic_bitset<>(1024, 0x0);
        actives = {
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {0.9999999999999998, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 1},
            {0.9999998618462653, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {0.9999307638963213, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {0.9999999999989027, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {0.9999972434778135, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {0.9999999998902606, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {0.9999999956311947, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {0.9986203684754087, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {0.9999890261776938, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {0.9999986184643713, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
            {0.9999999999912831, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT, 0},
        };
        final_likelihood = {
            {16157566, 0.002203537145472618},  {16157567, 0.002500176777813138},  {16157568, 0.002826951183871018},
            {16157569, 0.0031853939590090648}, {16157570, 0.0035768872122144434}, {16157571, 0.00400262211775718},
            {16157572, 0.004774956012366138},  {16157573, 0.005641353324294991},  {16157574, 0.006300140863794488},
            {16157575, 0.007015109715502989},  {16157576, 0.007788379849981741},  {16157577, 0.008621835700563223},
            {16157578, 0.009517088850061079},  {16157579, 0.010475441410135164},  {16157580, 0.01149785061172601},
            {16157581, 0.01258489510598041},   {16157582, 0.013736743443571361},  {16157583, 0.014953125157753398},
            {16157584, 0.016233304824984293},  {16157585, 0.01788745738798289},   {16157586, 0.019349233592033943},
            {16157587, 0.020878956835413576},  {16157588, 0.022475041783758296},  {16157589, 0.024135459740255612},
            {16157590, 0.02585773310157983},   {16157591, 0.027638931687324935},  {16157592, 0.029475670662667562},
            {16157593, 0.031364109788717565},  {16157594, 0.03329995377458442},   {16157595, 0.03527845356914061},
            {16157596, 0.037294408516939596},  {16157597, 0.03934216940848651},   {16157598, 0.041727040544327285},
            {16157599, 0.044189267657580314},  {16157600, 0.04673123977786744},   {16157601, 0.049356123459044283},
            {16157602, 0.052067972812193164},  {16157603, 0.05456044319361704},   {16157604, 0.05709292063715093},
            {16157605, 0.0596634377607085},    {16157606, 0.06227015638600999},   {16157607, 0.06491137190830254},
            {16157608, 0.06758551186283086},   {16157609, 0.0702911280614002},    {16157610, 0.07302688166991335},
            {16157611, 0.07579152061480036},   {16157612, 0.07858384875044269},   {16157613, 0.0814026862985091},
            {16157614, 0.08455821911616042},   {16157615, 0.08748452543718845},   {16157616, 0.09044272060193789},
            {16157617, 0.09343231105821383},   {16157618, 0.0964525825685422},    {16157619, 0.09950250609459836},
            {16157620, 0.10258063545428993},   {16157621, 0.10568499824991752},   {16157622, 0.108812982008508},
            {16157623, 0.11196121791821709},   {16157624, 0.11512546496832285},   {16157625, 0.11830049768391364},
            {16157626, 0.12148000096839133},   {16157627, 0.12465647580622233},   {16157628, 0.12782115971528793},
            {16157629, 0.13096396585560335},   {16157630, 0.13407344458558956},   {16157631, 0.13713677099956384},
            {16157632, 0.14013976157707414},   {16157633, 0.14306692252845385},   {16157634, 0.14590153174004822},
            {16157635, 0.14862575542172582},   {16157636, 0.15122079965924956},   {16157637, 0.15366709610093413},
            {16157638, 0.1559445199923465},    {16157639, 0.15803263774860418},   {16157640, 0.15991098025714245},
            {16157641, 0.16155933717132442},   {16157642, 0.1629580666226788},    {16157643, 0.16408841408012514},
            {16157644, 0.16493283354756838},   {16157645, 0.1654753039407374},    {16157646, 0.16570163333770152},
            {16157647, 0.16559974386549497},   {16157648, 0.16515993027026596},   {16157649, 0.16437508571492526},
            {16157650, 0.16324088904311745},   {16157651, 0.16206734658971567},   {16157652, 0.16029147326807203},
            {16157653, 0.15818055131620837},   {16157654, 0.15548208235385402},   {16157655, 0.15277377484779525},
            {16157656, 0.1497602251151829},    {16157657, 0.1464601764146401},    {16157658, 0.1428949178965729},
            {16157659, 0.13908803876999945},   {16157660, 0.1350651446162552},    {16157661, 0.1308535415417509},
            {16157662, 0.12648189448389519},   {16157663, 0.12197986642389835},   {16157664, 0.11737774551285701},
            {16157665, 0.11270606718519806},   {16157666, 0.10799523822417917},   {16157667, 0.10327516947095498},
            {16157668, 0.09857492344941861},   {16157669, 0.0939223826347243},    {16157670, 0.08934394344754398},
            {16157671, 0.08486424033340734},   {16157672, 0.08050590351182274},   {16157673, 0.07602788011866574},
            {16157674, 0.07175236508791909},   {16157675, 0.0679500352034598},    {16157676, 0.06432417108710653},
            {16157677, 0.060886635008618115},  {16157678, 0.05764647340625117},   {16157679, 0.05460995560074295},
            {16157680, 0.05178064831128059},   {16157681, 0.04915952315475665},   {16157682, 0.04674509398595739},
            {16157683, 0.044533580682003485},  {16157684, 0.04251909578514799},   {16157685, 0.04069385028911318},
            {16157686, 0.03878690172175368},   {16157687, 0.03735295814267918},   {16157688, 0.03606940908548344},
            {16157689, 0.034923989246596725},  {16157690, 0.033903629951952646},  {16157691, 0.03299470610582712},
            {16157692, 0.032183277151663296},  {16157693, 0.031455318775824595},  {16157694, 0.030796942349155292},
            {16157695, 0.030194599394802946},  {16157696, 0.02963526869181799},   {16157697, 0.029106623970098607},
            {16157698, 0.02859718052024869},   {16157699, 0.02783494636937136},   {16157700, 0.02711462150400669},
            {16157701, 0.026421563848158497},  {16157702, 0.025743150640704027},  {16157703, 0.025068722913450872},
            {16157704, 0.024650985407637705},  {16157705, 0.024178819045094908},  {16157706, 0.02365328842642517},
            {16157707, 0.02307621746695656},   {16157708, 0.02245014777649172},   {16157709, 0.02177828332626315},
            {16157710, 0.021064423201713565},  {16157711, 0.02031288446462023},   {16157712, 0.019839793716322114},
            {16157713, 0.019085663564785863},  {16157714, 0.018318393494563136},  {16157715, 0.01728320801886797},
            {16157716, 0.016552589625077652},  {16157717, 0.015822977773116663},  {16157718, 0.01510209916538003},
            {16157719, 0.014397489837422523},  {16157720, 0.013716421045480447},  {16157721, 0.013065831613283029},
            {16157722, 0.012452267096314591},  {16157723, 0.011881825904270999},  {16157724, 0.01136011232600547},
            {16157725, 0.01089219623283702},   {16157726, 0.010482579101291101},  {16157727, 0.010135165899076905},
            {16157728, 0.009853242320493259},  {16157729, 0.009639456839745526},  {16157730, 0.009495807071256837},
            {16157731, 0.009423629981630047},  {16157732, 0.00942359558354588},   {16157733, 0.00949570385130668},
            {16157734, 0.009639284723633804},  {16157735, 0.009853001193649565},  {16157736, 0.010134855620299057},
            {16157737, 0.01048219952136989},   {16157738, 0.010891747217698923},  {16157739, 0.011359593783793661},
            {16157740, 0.011881237815681258},  {16157741, 0.012451609547413476},  {16157742, 0.013065104829963054},
            {16157743, 0.013715625428652867},  {16157744, 0.014396625998014168},  {16157745, 0.015101167958187636},
            {16157746, 0.015821980328581023},  {16157747, 0.016551527378070884},  {16157748, 0.017282082733640028},
            {16157749, 0.01800580935922485},   {16157750, 0.018714844582820928},  {16157751, 0.019401389122169682},
            {16157752, 0.019796325788588132},  {16157753, 0.0204578838506801},    {16157754, 0.02106852227484289},
            {16157755, 0.021622439655300696},  {16157756, 0.022114267707654647},  {16157757, 0.022539157720810984},
            {16157758, 0.022892860055418032},  {16157759, 0.023171794868007245},  {16157760, 0.023373112415731673},
            {16157761, 0.023494741521410827},  {16157762, 0.023535425046356025},  {16157763, 0.023494741521410827},
            {16157764, 0.023373112415731673},  {16157765, 0.023171794868007245},  {16157766, 0.022892860055418032},
            {16157767, 0.022539157720810984},  {16157768, 0.022114267707654647},  {16157769, 0.021622439655300696},
            {16157770, 0.02106852227484289},   {16157771, 0.0204578838506801},    {16157772, 0.019796325788588132},
            {16157773, 0.019089991153306063},  {16157774, 0.018345270204884565},  {16157775, 0.017568704952826315},
            {16157776, 0.016766894701800525},  {16157777, 0.01625780243454286},   {16157778, 0.015483252360636957},
            {16157779, 0.01471206128638209},   {16157780, 0.01395139534961325},   {16157781, 0.013208178113237424},
            {16157782, 0.012489033130905524},  {16157783, 0.01180023431772982},   {16157784, 0.011147664139455617},
            {16157785, 0.010536779390783518},  {16157786, 0.009972584117164267},  {16157787, 0.009459609051444487},
            {16157788, 0.0090018967928941},    {16157789, 0.00860299185545773},   {16157790, 0.008265934656891977},
            {16157791, 0.00799325851136264},   {16157792, 0.00778698872391438},   {16157793, 0.007648642963144107},
            {16157794, 0.007579232204011691},  {16157795, 0.007579261680237752},  {16157796, 0.0076487314582451785},
            {16157797, 0.0077871364342807625}, {16157798, 0.007993465754774123},  {16157799, 0.008266201858411308},
            {16157800, 0.00860331952807756},   {16157801, 0.009002285513326786},  {16157802, 0.009460059431545495},
            {16157803, 0.00997309677157409},   {16157804, 0.010537354901457949},  {16157805, 0.011148303017828461},
            {16157806, 0.01180093696531387},   {16157807, 0.012489799799185382},  {16157808, 0.013209008863739947},
            {16157809, 0.01395229001505694},   {16157810, 0.014713019433804356},  {16157811, 0.015484273257377305},
            {16157812, 0.016258885017920274},  {16157813, 0.016768055656640458},  {16157814, 0.017569921425727775},
            {16157815, 0.01834654044786116},   {16157816, 0.019091312961429623},  {16157817, 0.01979769650395588},
            {16157818, 0.020459300372921912},  {16157819, 0.02106998107823733},   {16157820, 0.021623936812431785},
            {16157821, 0.022115798919401568},  {16157822, 0.022540718352323817},  {16157823, 0.022894445177598016},
            {16157824, 0.023173399303884037},  {16157825, 0.023374730791016183},  {16157826, 0.023496368318403793},
            {16157827, 0.02353705466031278},   {16157828, 0.023496368318403793},  {16157829, 0.023374730791016183},
            {16157830, 0.023173399303884037},  {16157831, 0.022894445177598016},  {16157832, 0.022540718352323817},
            {16157833, 0.022427196888265187},  {16157834, 0.02199351119036815},   {16157835, 0.021507085484635865},
            {16157836, 0.02097448840476141},   {16157837, 0.020402819416347525},  {16157838, 0.019799615307310055},
            {16157839, 0.01917275152606524},   {16157840, 0.018530340105968192},  {16157841, 0.017880625884447544},
            {16157842, 0.017231882653976672},  {16157843, 0.01659231077521862},   {16157844, 0.015969937647277884},
            {16157845, 0.015372522273646654},  {16157846, 0.014807464993173623},  {16157847, 0.014281723271212743},
            {16157848, 0.013801734274616681},  {16157849, 0.013373344792244427},  {16157850, 0.013001748915892949},
            {16157851, 0.012691433769447846},  {16157852, 0.012446133469479086},  {16157853, 0.012268791419786155},
            {16157854, 0.012161530985210186},  {16157855, 0.012125634554529908},  {16157856, 0.012161530985210186},
            {16157857, 0.012268791419786155},  {16157858, 0.012446133469479086},  {16157859, 0.012691433769447846},
            {16157860, 0.013001748915892949},  {16157861, 0.013373344792244427},  {16157862, 0.013801734274616681},
            {16157863, 0.014593121240076362},  {16157864, 0.015177039371109988},  {16157865, 0.015809626680045187},
            {16157866, 0.016485125679117384},  {16157867, 0.017197433687610265},  {16157868, 0.017940184999857105},
            {16157869, 0.018706836962651623},  {16157870, 0.01949075878620861},   {16157871, 0.020285321753872324},
            {16157872, 0.021083989352248016},  {16157873, 0.02188040572423526},   {16157874, 0.02266848076122747},
            {16157875, 0.023442470105453094},  {16157876, 0.024197048335840767},  {16157877, 0.024927373666078324},
            {16157878, 0.025367669536194834},  {16157879, 0.02607983913660708},   {16157880, 0.02675028651609848},
            {16157881, 0.027377352908773363},  {16157882, 0.02795992636190631},   {16157883, 0.028497435637807784},
            {16157884, 0.028989830397863382},  {16157885, 0.02943754806828114},   {16157886, 0.029841468209634632},
            {16157887, 0.030202855619889165},  {16157888, 0.030523293778300382},  {16157889, 0.030804610571092232},
            {16157890, 0.03104879851611029},   {16157891, 0.03125793191147269},   {16157892, 0.03143408346366758},
            {16157893, 0.03157924299735548},   {16157894, 0.03169524080913062},   {16157895, 0.031783678100690584},
            {16157896, 0.0318458667165396},    {16157897, 0.03188278012397135},   {16157898, 0.03189501721807742},
            {16157899, 0.03188278012397135},   {16157900, 0.0318458667165396},    {16157901, 0.03209507606955386},
            {16157902, 0.03206481518706658},   {16157903, 0.03201634740375354},   {16157904, 0.03194927149550651},
            {16157905, 0.031863054823863673},  {16157906, 0.03175710086198994},   {16157907, 0.031630821649295406},
            {16157908, 0.03179510956902795},   {16157909, 0.031684999206891426},  {16157910, 0.03156294545608172},
            {16157911, 0.03143032098787951},   {16157912, 0.03128894399868449},   {16157913, 0.03114112065205219},
            {16157914, 0.03098967230811142},   {16157915, 0.030837945719408778},  {16157916, 0.030689804860948966},
            {16157917, 0.030861001568974512},  {16157918, 0.030791713361189455},  {16157919, 0.030749689908256602},
            {16157920, 0.030741599319071573},  {16157921, 0.030774400660242947},  {16157922, 0.030855227040664613},
            {16157923, 0.030991254558532688},  {16157924, 0.031189559770645827},  {16157925, 0.03176836666558503},
            {16157926, 0.032169475037495295},  {16157927, 0.0326613148383459},    {16157928, 0.033250220348551005},
            {16157929, 0.03394175267990902},   {16157930, 0.03474055646637636},   {16157931, 0.035650226929818646},
            {16157932, 0.03667319022942549},   {16157933, 0.03781059971851418},   {16157934, 0.03880077733347909},
            {16157935, 0.04020771944313817},   {16157936, 0.0417178434547006},    {16157937, 0.04332738573613787},
            {16157938, 0.045031010083692896},  {16157939, 0.0468218380383164},    {16157940, 0.0486915025567601},
            {16157941, 0.050630224106632836},  {16157942, 0.05262690787730488},   {16157943, 0.05466926045609429},
            {16157944, 0.056743924017679914},  {16157945, 0.05883662581892543},   {16157946, 0.06093234058472992},
            {16157947, 0.06301546321526823},   {16157948, 0.0650699891418328},    {16157949, 0.06707969960692715},
            {16157950, 0.06902834914256509},   {16157951, 0.07089985256607753},   {16157952, 0.072678468901347},
            {16157953, 0.07434897976073837},   {16157954, 0.07589685988394715},   {16157955, 0.07730843771905084},
            {16157956, 0.0785710441425631},    {16157957, 0.07967314764363306},   {16157958, 0.08060447453730761},
            {16157959, 0.0813561130179718},    {16157960, 0.08192060011221705},   {16157961, 0.08229199083658609},
            {16157962, 0.08246590910671539},   {16157963, 0.08243958017783251},   {16157964, 0.08195037156178406},
            {16157965, 0.08156436006810691},   {16157966, 0.08128406856116183},   {16157967, 0.08055006858911122},
            {16157968, 0.07963039361912864},   {16157969, 0.07853340486203923},   {16157970, 0.0772688233438368},
            {16157971, 0.07584763488953357},   {16157972, 0.07428198128970544},   {16157973, 0.07258503874482508},
            {16157974, 0.07077088482358472},   {16157975, 0.06885435530595832},   {16157976, 0.06685089240869568},
            {16157977, 0.06477638600886587},   {16157978, 0.06264700958820925},   {16157979, 0.06047905271535646},
            {16157980, 0.05828875196213729},   {16157981, 0.05609212221180923},   {16157982, 0.05390479035862082},
            {16157983, 0.051741833417298544},  {16157984, 0.04961762305559303},   {16157985, 0.047545678531008585},
            {16157986, 0.045538529952708254},  {16157987, 0.0436075937002309},    {16157988, 0.041763061711495894},
            {16157989, 0.04001380620360235},   {16157990, 0.0383673012117664},    {16157991, 0.03682956212563782},
            {16157992, 0.03540510417010481},   {16157993, 0.03409692052209474},   {16157994, 0.03290648047901033},
            {16157995, 0.03183374780212282},   {16157996, 0.030877219053870822},  {16157997, 0.030033981436515013},
            {16157998, 0.02929978932636635},   {16157999, 0.028669158388624615},  {16158000, 0.02813547585881294},
            {16158001, 0.027691125294132913},  {16158002, 0.027066150779365257},  {16158003, 0.026816975829990007},
            {16158004, 0.026623349427339536},  {16158005, 0.026475926172363363},  {16158006, 0.026365036559537536},
            {16158007, 0.02628085584434883},   {16158008, 0.026213570619992202},  {16158009, 0.025892067920297277},
            {16158010, 0.02587265711767648},   {16158011, 0.025836008311701783},  {16158012, 0.02577469876094147},
            {16158013, 0.025681936076359605},  {16158014, 0.025551662656386365},  {16158015, 0.02537864269574133},
            {16158016, 0.025158530614929973},  {16158017, 0.024887920179734246},  {16158018, 0.0243029009515826},
            {16158019, 0.02396763962626698},   {16158020, 0.023571161622078972},  {16158021, 0.023114743376445996},
            {16158022, 0.022600475295609584},  {16158023, 0.022031208152008493},  {16158024, 0.02141048664444102},
            {16158025, 0.02074247204465953},   {16158026, 0.019770382977744732},  {16158027, 0.019064973984222196},
            {16158028, 0.0183212289822921},    {16158029, 0.017545681408244248},  {16158030, 0.016744921918450454},
            {16158031, 0.01592550692342299},   {16158032, 0.015093871716970245},  {16158033, 0.014256249746645277},
            {16158034, 0.013418599354123309},  {16158035, 0.012586539071508642},  {16158036, 0.011765292300448872},
            {16158037, 0.011271036485655762},  {16158038, 0.010543465537387657},  {16158039, 0.009848958477049646},
            {16158040, 0.009192006671482343},  {16158041, 0.00857667868515179},   {16158042, 0.008006622101946661},
            {16158043, 0.0074850714391905965}, {16158044, 0.007014860964197884},  {16158045, 0.006598441144654722},
            {16158046, 0.006237897429969889},  {16158047, 0.005934970071232009},  {16158048, 0.005691073740997447},
            {16158049, 0.005507315808106871},  {16158050, 0.005384512253332512},  {16158051, 0.005323200374216713},
            {16158052, 0.005323647616524474},  {16158053, 0.0053858560792229},    {16158054, 0.005509562463271908},
            {16158055, 0.005694233464901963},  {16158056, 0.005939056844446764},  {16158057, 0.006242928625171787},
            {16158058, 0.006604437086030365},  {16158059, 0.00702184440133783},   {16158060, 0.007493066942901922},
            {16158061, 0.008015655390728727},  {16158062, 0.008586775892357752},  {16158063, 0.009203193564405233},
            {16158064, 0.009861259640300837},  {16158065, 0.010556903533947138},  {16158066, 0.011285631009835258},
            {16158067, 0.011781417204801893},  {16158068, 0.012603789534436444},  {16158069, 0.013436990196068518},
            {16158070, 0.014275788629124948},  {16158071, 0.015114558601030375},  {16158072, 0.015947333603913007},
            {16158073, 0.01676787164697726},   {16158074, 0.017569728616532113},  {16158075, 0.018346339116186352},
            {16158076, 0.01909110345675359},   {16158077, 0.020108876786208606},  {16158078, 0.020828649723551307},
            {16158079, 0.021506853662532206},  {16158080, 0.022138886835280525},  {16158081, 0.02272067830094685},
            {16158082, 0.023248772361821473},  {16158083, 0.023720403874788878},  {16158084, 0.02413356235650564},
            {16158085, 0.024487042971625704},  {16158086, 0.024780482743962485},  {16158087, 0.02501438063540693},
            {16158088, 0.02519010048958829},   {16158089, 0.02530985622788845},   {16158090, 0.025376679104325388},
            {16158091, 0.02539436726175468},   {16158092, 0.025367418272823204},  {16158093, 0.025300945782827888},
            {16158094, 0.025511979754669872},  {16158095, 0.025441940825934244},  {16158096, 0.025359732139527885},
            {16158097, 0.025273041403939336},  {16158098, 0.02518968085918596},   {16158099, 0.025117450363327486},
            {16158100, 0.02506399938830482},   {16158101, 0.02503669067267104},   {16158102, 0.025042468229474604},
            {16158103, 0.02508773229374494},   {16158104, 0.025178223619896068},  {16158105, 0.025318919310738115},
            {16158106, 0.02551394208392861},   {16158107, 0.025766484567028666},  {16158108, 0.026078749868143142},
            {16158109, 0.026451909305264643},  {16158110, 0.02688607780398698},   {16158111, 0.02738030710019933},
            {16158112, 0.027932596521321962},  {16158113, 0.028539920775531368},  {16158114, 0.029198273861254398},
            {16158115, 0.02990272792585905},   {16158116, 0.03064750565849556},   {16158117, 0.03142606460158086},
            {16158118, 0.032231191611106644},  {16158119, 0.03305510558890806},   {16158120, 0.03388956654989734},
            {16158121, 0.034725989072295536},  {16158122, 0.03555555820607593},   {16158123, 0.03636934598007374},
            {16158124, 0.037158426746551704},  {16158125, 0.03791398972783423},   {16158126, 0.03862744727694106},
            {16158127, 0.0392905375268387},    {16158128, 0.03989542027497837},   {16158129, 0.04043476512555158},
            {16158130, 0.04090183108627804},   {16158131, 0.041290536985191445},  {16158132, 0.0415955222323159},
            {16158133, 0.04181219759878094},   {16158134, 0.04193678582023354},   {16158135, 0.041966351951743794},
            {16158136, 0.04189882350801599},   {16158137, 0.04173300051661373},   {16158138, 0.041207085505309354},
            {16158139, 0.0408872334535892},    {16158140, 0.04046434232965378},   {16158141, 0.03994143179465618},
            {16158142, 0.039322217367799804},  {16158143, 0.0386110719039995},    {16158144, 0.03781298022819238},
            {16158145, 0.036933487407143986},  {16158146, 0.035978641225738045},  {16158147, 0.0349549295204554},
            {16158148, 0.03386921310609025},   {16158149, 0.03272865511034563},   {16158150, 0.03154064760210505},
            {16158151, 0.03031273646003109},   {16158152, 0.029052545475817874},  {16158153, 0.0277677007182053},
            {16158154, 0.026465756197359136},  {16158155, 0.02515412186253008},   {16158156, 0.023839994937747237},
            {16158157, 0.02253029555012657},   {16158158, 0.021231607533432343},  {16158159, 0.019950125196891814},
            {16158160, 0.018691606737816453},  {16158161, 0.0174613348489612},    {16158162, 0.01626408493104953},
            {16158163, 0.015104101171320978},  {16158164, 0.013985080594504448},  {16158165, 0.012910165037664416},
            {16158166, 0.01188194084930182},   {16158167, 0.010902445970145955},  {16158168, 0.009973183922144385},
            {16158169, 0.009095144116658661},  {16158170, 0.008268827795615235},  {16158171, 0.007494278842456509},
            {16158172, 0.006771118644547611},  {16158173, 0.006098584155804483},  {16158174, 0.005475568297540647},
            {16158175, 0.004900661845986832},  {16158176, 0.004372195985078484},  {16158177, 0.0038882847508394953},
            {16158178, 0.003185393958981298},  {16158179, 0.002826951183846376},  {16158180, 0.002500176777791344},
            {16158181, 0.00220353714545341},
        };
        actives_site = {16157603, 16157622, 16157623, 16157635, 16157648, 16157649, 16157650, 16157651,
                        16157652, 16157664, 16157701, 16157762, 16157827, 16157883, 16157913, 16157951,
                        16157958, 16157967, 16157975, 16158016, 16158087, 16158127, 16158144};
    }
    contig_info_t fasta_info;
    std::vector<hts_pos_t> actives_site;
    std::vector<std::pair<hts_pos_t, double>> final_likelihood;
    void TearDown() override { delete _bit; }
    std::vector<ActiveResult> actives;
    boost::dynamic_bitset<>* _bit;
};
uint8_t* TestHCActiveBaseExtensionSuite1::_buffer = nullptr;
pMemoryPool TestHCActiveBaseExtensionSuite1::_pool = nullptr;
int TestHCActiveBaseExtensionSuite1::ref_len = 0;
char* TestHCActiveBaseExtensionSuite1::ref = nullptr;

TEST_F(TestHCActiveBaseExtensionSuite1, test_incoporate_case1)
{
    int stripe = 50;
    for (int i = 0; i < 100; i++) _bit->set(i, true);
    ActiveRegionEngine engine(5, 10, nullptr, &fasta_info);

    std::shared_ptr<ActiveBase> base;
    std::vector<std::shared_ptr<ActiveBase>> v_bases;
    int work_id = 0;
    for (hts_pos_t iter = 16157566; iter < 16158181; iter += stripe, work_id++) {
        if (iter + stripe < 16158181)
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, iter + stripe, _bit, work_id, ref, ref_len);
        else
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, 16158182, _bit, work_id, ref, ref_len);
        v_bases.push_back(base);
    }
    EXPECT_EQ(actives_site.size(), actives.size());
    // 每个位点设置active value
    for (size_t i = 0; i < actives_site.size(); i++) {
        for (auto base : v_bases) {
            int offset = base->get_actual_offset(21, actives_site[i]);
            if (offset >= 0) {
                ActiveResult& result = base->get_active_actual_result(offset);
                result = actives[i];
                break;
            }
        }
    }
    // 看是否设置成功
    EXPECT_EQ(v_bases[0]->get_active_actual_result(37).acitve_value, 1.0);
    EXPECT_EQ(v_bases[0]->get_active_actual_result(37).state, BaseState::HC_REGION_BASES_ACTIVE_ONE_SLOT);
    EXPECT_EQ(v_bases[0]->get_active_actual_result(37).extend_length, 0);
    EXPECT_EQ(v_bases.size(), 13);
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    ring_buffer.reset(21, 16157566);

    ActiveRegionIndexRecord& record = engine.get_record_stauts();
    for (auto base : v_bases) {
        engine.dummy_append(base);
        record.current_work_id = base->get_work_id();
        engine.incorporate_status();
    }
    // ActiveRegionIndexRecord& record = engine.get_record_stauts();
    EXPECT_EQ(ring_buffer.get_start(), 16157566);
    for (auto pair_likelihood : final_likelihood) {
        double likelihood = ring_buffer.get_likelihood(21, pair_likelihood.first);
        ASSERT_NEAR(likelihood, pair_likelihood.second, 1E-10);
    }
}

TEST_F(TestHCActiveBaseExtensionSuite1, test_region_case1)
{
    int stripe = 50;
    for (int i = 0; i < 100; i++) _bit->set(i, true);
    ActiveRegionEngine engine(50, 300, nullptr, &fasta_info);

    std::shared_ptr<ActiveBase> base;
    std::vector<std::shared_ptr<ActiveBase>> v_bases;
    int work_id = 0;
    for (hts_pos_t iter = 16157566; iter < 16158181; iter += stripe, work_id++) {
        if (iter + stripe < 16158181)
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, iter + stripe, _bit, work_id, ref, ref_len);
        else
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, 16158182, _bit, work_id, ref, ref_len);
        v_bases.push_back(base);
    }
    EXPECT_EQ(actives_site.size(), actives.size());
    // 每个位点设置active value
    for (size_t i = 0; i < actives_site.size(); i++) {
        for (auto base : v_bases) {
            int offset = base->get_actual_offset(21, actives_site[i]);
            if (offset >= 0) {
                ActiveResult& result = base->get_active_actual_result(offset);
                result = actives[i];
                break;
            }
        }
    }
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    ring_buffer.reset(21, 16157566);
    engine.update_finish(v_bases.size() - 1);
    for (auto base : v_bases) {
        engine.append(base);
    }
    std::vector<p_hc_region_active_storage> v_regions;
    p_hc_region_active_storage region = nullptr;
    while ((region = engine.poll()) != nullptr) {
        if (region->active)
            v_regions.push_back(region);
        else
            free(region);
    }
    EXPECT_EQ(v_regions.size(), 3);
    EXPECT_EQ(v_regions[0]->active, 1);
    EXPECT_EQ(v_regions[0]->tid, 21);
    EXPECT_EQ(v_regions[0]->start_index, 16157566);
    EXPECT_EQ(v_regions[0]->end_index, 16157794);
    EXPECT_EQ(v_regions[1]->active, 1);
    EXPECT_EQ(v_regions[1]->tid, 21);
    EXPECT_EQ(v_regions[1]->start_index, 16157795);
    EXPECT_EQ(v_regions[1]->end_index, 16158051);
    EXPECT_EQ(v_regions[2]->active, 1);
    EXPECT_EQ(v_regions[2]->tid, 21);
    EXPECT_EQ(v_regions[2]->start_index, 16158052);
    EXPECT_EQ(v_regions[2]->end_index, 16158181);
}

TEST_F(TestHCActiveBaseExtensionSuite1, test_region_case2)
{
    int stripe = 50;
    for (int i = 0; i < 100; i++) _bit->set(i, true);
    ActiveRegionEngine engine(50, 300, nullptr, &fasta_info);

    std::shared_ptr<ActiveBase> base;
    std::vector<std::shared_ptr<ActiveBase>> v_bases;
    int work_id = 0;
    for (hts_pos_t iter = 16157566; iter < 16158181; iter += stripe, work_id++) {
        if (iter + stripe < 16158181)
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, iter + stripe, _bit, work_id, ref, ref_len);
        else
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, 16158182, _bit, work_id, ref, ref_len);
        v_bases.push_back(base);
    }
    EXPECT_EQ(actives_site.size(), actives.size());
    // 每个位点设置active value
    for (size_t i = 0; i < actives_site.size(); i++) {
        for (auto base : v_bases) {
            int offset = base->get_actual_offset(21, actives_site[i]);
            if (offset >= 0) {
                ActiveResult& result = base->get_active_actual_result(offset);
                result = actives[i];
                break;
            }
        }
    }
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    ring_buffer.reset(21, 16157566);
    std::vector<p_hc_region_active_storage> v_regions;
    p_hc_region_active_storage region = nullptr;
    engine.update_finish(v_bases.size() - 1);
    for (auto base : v_bases) {
        engine.append(base);
        while ((region = engine.poll()) != nullptr) {
            if (region->active)
                v_regions.push_back(region);
            else
                free(region);
        }
    }

    EXPECT_EQ(v_regions.size(), 3);
    EXPECT_EQ(v_regions[0]->active, 1);
    EXPECT_EQ(v_regions[0]->tid, 21);
    EXPECT_EQ(v_regions[0]->start_index, 16157566);
    EXPECT_EQ(v_regions[0]->end_index, 16157794);
    EXPECT_EQ(v_regions[1]->active, 1);
    EXPECT_EQ(v_regions[1]->tid, 21);
    EXPECT_EQ(v_regions[1]->start_index, 16157795);
    EXPECT_EQ(v_regions[1]->end_index, 16158051);
    EXPECT_EQ(v_regions[2]->active, 1);
    EXPECT_EQ(v_regions[2]->tid, 21);
    EXPECT_EQ(v_regions[2]->start_index, 16158052);
    EXPECT_EQ(v_regions[2]->end_index, 16158181);
}
#include <stdlib.h> /* srand, rand */

TEST_F(TestHCActiveBaseExtensionSuite1, test_region_for_actual_base_case1)
{
    // ringbuffer设置到16157566
    // 根据actives_site生成实际的base,用一个随机数来选择end坐标。
    srand(0);
    for (int i = 0; i < 100; i++) _bit->set(i, true);
    ActiveRegionEngine engine(50, 300, nullptr, &fasta_info);
    hts_pos_t iter = 0;
    std::shared_ptr<ActiveBase> base;
    std::vector<std::shared_ptr<ActiveBase>> v_bases;
    for (size_t i = 0; i < actives_site.size(); i++) {
        if (i == 0) {
            iter = actives_site[i] + 1 + (rand() % (actives_site[i + 1] - actives_site[i]));
            base =
                std::make_shared<HcActiveBase>(_pool, 2, 21, 16157566, iter, actives_site[i], actives_site[i] + 1, _bit, i, ref, ref_len);
        }
        else if (i == actives_site.size() - 1) {
            base =
                std::make_shared<HcActiveBase>(_pool, 2, 21, iter, 16158182, actives_site[i], actives_site[i] + 1, _bit, i, ref, ref_len);
        }
        else {
            hts_pos_t end = actives_site[i] + 1 + (rand() % (actives_site[i + 1] - actives_site[i]));
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, end, actives_site[i], actives_site[i] + 1, _bit, i, ref, ref_len);
            iter = end;
        }
        v_bases.push_back(base);
    }
    for (size_t i = 0; i < actives_site.size(); i++) {
        for (auto base : v_bases) {
            int offset = base->get_actual_offset(21, actives_site[i]);
            if (offset >= 0) {
                ActiveResult& result = base->get_active_actual_result(offset);
                result = actives[i];
                break;
            }
        }
    }
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    ring_buffer.reset(21, 16157566);

    ActiveRegionIndexRecord& record = engine.get_record_stauts();
    for (auto base : v_bases) {
        engine.dummy_append(base);
        record.current_work_id = base->get_work_id();
        engine.incorporate_status();
    }
    EXPECT_EQ(ring_buffer.get_start(), 16157566);
    for (auto pair_likelihood : final_likelihood) {
        double likelihood = ring_buffer.get_likelihood(21, pair_likelihood.first);
        ASSERT_NEAR(likelihood, pair_likelihood.second, 1E-10);
    }
}

TEST_F(TestHCActiveBaseExtensionSuite1, test_region_for_actual_base_case2)
{
    srand(0);
    for (int i = 0; i < 100; i++) _bit->set(i, true);
    ActiveRegionEngine engine(50, 300, nullptr, &fasta_info);
    hts_pos_t iter = 0;
    std::shared_ptr<ActiveBase> base;
    std::vector<std::shared_ptr<ActiveBase>> v_bases;
    for (size_t i = 0; i < actives_site.size(); i++) {
        if (i == 0) {
            iter = actives_site[i] + 1 + (rand() % (actives_site[i + 1] - actives_site[i]));
            base =
                std::make_shared<HcActiveBase>(_pool, 2, 21, 16157566, iter, actives_site[i], actives_site[i] + 1, _bit, i, ref, ref_len);
        }
        else if (i == actives_site.size() - 1) {
            base =
                std::make_shared<HcActiveBase>(_pool, 2, 21, iter, 16158182, actives_site[i], actives_site[i] + 1, _bit, i, ref, ref_len);
        }
        else {
            hts_pos_t end = actives_site[i] + 1 + (rand() % (actives_site[i + 1] - actives_site[i]));
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, end, actives_site[i], actives_site[i] + 1, _bit, i, ref, ref_len);
            iter = end;
        }
        v_bases.push_back(base);
    }
    for (size_t i = 0; i < actives_site.size(); i++) {
        for (auto base : v_bases) {
            int offset = base->get_actual_offset(21, actives_site[i]);
            if (offset >= 0) {
                ActiveResult& result = base->get_active_actual_result(offset);
                result = actives[i];
                break;
            }
        }
    }
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    ring_buffer.reset(21, 16157566);
    engine.update_finish(v_bases.size() - 1);
    for (auto base : v_bases) {
        engine.append(base);
    }
    std::vector<p_hc_region_active_storage> v_regions;
    p_hc_region_active_storage region = nullptr;
    while ((region = engine.poll()) != nullptr) {
        if (region->active)
            v_regions.push_back(region);
        else
            free(region);
    }
    ASSERT_EQ(v_regions.size(), 3);
    EXPECT_EQ(v_regions[0]->active, 1);
    EXPECT_EQ(v_regions[0]->tid, 21);
    EXPECT_EQ(v_regions[0]->start_index, 16157566);
    EXPECT_EQ(v_regions[0]->end_index, 16157794);
    EXPECT_EQ(v_regions[1]->active, 1);
    EXPECT_EQ(v_regions[1]->tid, 21);
    EXPECT_EQ(v_regions[1]->start_index, 16157795);
    EXPECT_EQ(v_regions[1]->end_index, 16158051);
    EXPECT_EQ(v_regions[2]->active, 1);
    EXPECT_EQ(v_regions[2]->tid, 21);
    EXPECT_EQ(v_regions[2]->start_index, 16158052);
    EXPECT_EQ(v_regions[2]->end_index, 16158181);
}

TEST_F(TestHCActiveBaseExtensionSuite1, test_refresh_logic_case)
{
    // ringbuffer从tid=21,start=0开始
    // stripe 50 生成base 21号染色体 [16157566,16158181]
    // stripe 50 生成base 22号染色体 [16157566,16158181]
    srand(0);
    for (int i = 0; i < 100; i++) _bit->set(i, true);
    ActiveRegionEngine engine(50, 300, nullptr, &fasta_info);
    hts_pos_t iter = 0;
    std::shared_ptr<ActiveBase> base;
    std::vector<std::shared_ptr<ActiveBase>> v_bases;
    // 21th chromsome
    for (size_t i = 0; i < actives_site.size(); i++) {
        if (i == 0) {
            iter = actives_site[i] + 1 + (rand() % (actives_site[i + 1] - actives_site[i]));
            base =
                std::make_shared<HcActiveBase>(_pool, 2, 21, 16157566, iter, actives_site[i], actives_site[i] + 1, _bit, i, ref, ref_len);
        }
        else if (i == actives_site.size() - 1) {
            base =
                std::make_shared<HcActiveBase>(_pool, 2, 21, iter, 16158182, actives_site[i], actives_site[i] + 1, _bit, i, ref, ref_len);
        }
        else {
            hts_pos_t end = actives_site[i] + 1 + (rand() % (actives_site[i + 1] - actives_site[i]));
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, end, actives_site[i], actives_site[i] + 1, _bit, i, ref, ref_len);
            iter = end;
        }
        v_bases.push_back(base);
    }
    for (size_t i = 0; i < actives_site.size(); i++) {
        for (auto base : v_bases) {
            int offset = base->get_actual_offset(21, actives_site[i]);
            if (offset >= 0) {
                ActiveResult& result = base->get_active_actual_result(offset);
                result = actives[i];
                break;
            }
        }
    }
    //  22th chromsome
    for (size_t i = 0; i < actives_site.size(); i++) {
        if (i == 0) {
            iter = actives_site[i] + 1 + (rand() % (actives_site[i + 1] - actives_site[i]));
            base = std::make_shared<HcActiveBase>(_pool, 2, 22, 16157566, iter, actives_site[i], actives_site[i] + 1, _bit,
                                                  i + actives_site.size(), ref, ref_len);
        }
        else if (i == actives_site.size() - 1) {
            base = std::make_shared<HcActiveBase>(_pool, 2, 22, iter, 16158182, actives_site[i], actives_site[i] + 1, _bit,
                                                  i + actives_site.size(), ref, ref_len);
        }
        else {
            hts_pos_t end = actives_site[i] + 1 + (rand() % (actives_site[i + 1] - actives_site[i]));
            base = std::make_shared<HcActiveBase>(_pool, 2, 22, iter, end, actives_site[i], actives_site[i] + 1, _bit,
                                                  i + actives_site.size(), ref, ref_len);
            iter = end;
        }
        v_bases.push_back(base);
    }
    for (size_t i = 0; i < actives_site.size(); i++) {
        for (auto base : v_bases) {
            int offset = base->get_actual_offset(22, actives_site[i]);
            if (offset >= 0) {
                ActiveResult& result = base->get_active_actual_result(offset);
                result = actives[i];
                break;
            }
        }
    }
    // AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    // ring_buffer.reset(21, 0);
    // 期待输出
    engine.update_finish(v_bases.size() - 1);
    for (auto base : v_bases) {
        // std::cerr << base->get_work_id() << std::endl;
        engine.append(base);
    }
    std::vector<p_hc_region_active_storage> v_regions;
    p_hc_region_active_storage region = nullptr;
    while ((region = engine.poll()) != nullptr) {
        v_regions.push_back(region);
    }
    int v_i = 0;

    for (int i = 0; i < 21; i++) {
        for (hts_pos_t pos = 0; pos < (hts_pos_t)fasta_info.idict[i]; pos += 300) {
            if (pos + 300 < (hts_pos_t)fasta_info.idict[i]) {
                ASSERT_EQ(v_regions[v_i]->active, 0);
                ASSERT_EQ(v_regions[v_i]->tid, i) << i << "\t" << pos;
                ASSERT_EQ(v_regions[v_i]->start_index, pos);
                ASSERT_EQ(v_regions[v_i]->end_index, pos + 299);
            }
            else {
                ASSERT_EQ(v_regions[v_i]->active, 0);
                ASSERT_EQ(v_regions[v_i]->tid, i);
                ASSERT_EQ(v_regions[v_i]->start_index, pos);
                ASSERT_EQ(v_regions[v_i]->end_index, fasta_info.idict[i] - 1);
            }
            v_i++;
        }
    }
    for (hts_pos_t pos = 0; pos < 16157566; pos += 300) {
        if (pos + 300 < 16157566) {
            ASSERT_EQ(v_regions[v_i]->active, 0);
            ASSERT_EQ(v_regions[v_i]->tid, 21);
            ASSERT_EQ(v_regions[v_i]->start_index, pos);
            ASSERT_EQ(v_regions[v_i]->end_index, pos + 299);
        }
        else {
            ASSERT_EQ(v_regions[v_i]->active, 0);
            ASSERT_EQ(v_regions[v_i]->tid, 21);
            ASSERT_EQ(v_regions[v_i]->start_index, pos);
            ASSERT_EQ(v_regions[v_i]->end_index, 16157565);
        }
        v_i++;
    }
    EXPECT_EQ(v_regions[v_i]->active, 1);
    EXPECT_EQ(v_regions[v_i]->tid, 21);
    EXPECT_EQ(v_regions[v_i]->start_index, 16157566);
    EXPECT_EQ(v_regions[v_i]->end_index, 16157794);
    v_i++;
    EXPECT_EQ(v_regions[v_i]->active, 1);
    EXPECT_EQ(v_regions[v_i]->tid, 21);
    EXPECT_EQ(v_regions[v_i]->start_index, 16157795);
    EXPECT_EQ(v_regions[v_i]->end_index, 16158051);
    v_i++;
    EXPECT_EQ(v_regions[v_i]->active, 1);
    EXPECT_EQ(v_regions[v_i]->tid, 21);
    EXPECT_EQ(v_regions[v_i]->start_index, 16158052);
    EXPECT_EQ(v_regions[v_i]->end_index, 16158181);
    v_i++;
    for (hts_pos_t pos = 16158182; pos < (hts_pos_t)fasta_info.idict[21]; pos += 300) {
        if (pos + 300 < (hts_pos_t)fasta_info.idict[21]) {
            ASSERT_EQ(v_regions[v_i]->active, 0);
            ASSERT_EQ(v_regions[v_i]->tid, 21);
            ASSERT_EQ(v_regions[v_i]->start_index, pos);
            ASSERT_EQ(v_regions[v_i]->end_index, pos + 299);
        }
        else {
            ASSERT_EQ(v_regions[v_i]->active, 0);
            ASSERT_EQ(v_regions[v_i]->tid, 21);
            ASSERT_EQ(v_regions[v_i]->start_index, pos);
            ASSERT_EQ(v_regions[v_i]->end_index, fasta_info.idict[21] - 1);
        }
        v_i++;
    }
    for (hts_pos_t pos = 0; pos < 16157566; pos += 300) {
        if (pos + 300 < 16157566) {
            ASSERT_EQ(v_regions[v_i]->active, 0);
            ASSERT_EQ(v_regions[v_i]->tid, 22);
            ASSERT_EQ(v_regions[v_i]->start_index, pos);
            ASSERT_EQ(v_regions[v_i]->end_index, pos + 299);
        }
        else {
            ASSERT_EQ(v_regions[v_i]->active, 0);
            ASSERT_EQ(v_regions[v_i]->tid, 22);
            ASSERT_EQ(v_regions[v_i]->start_index, pos);
            ASSERT_EQ(v_regions[v_i]->end_index, 16157565);
        }
        v_i++;
    }
    EXPECT_EQ(v_regions[v_i]->active, 1);
    EXPECT_EQ(v_regions[v_i]->tid, 22);
    EXPECT_EQ(v_regions[v_i]->start_index, 16157566);
    EXPECT_EQ(v_regions[v_i]->end_index, 16157794);
    v_i++;
    EXPECT_EQ(v_regions[v_i]->active, 1);
    EXPECT_EQ(v_regions[v_i]->tid, 22);
    EXPECT_EQ(v_regions[v_i]->start_index, 16157795);
    EXPECT_EQ(v_regions[v_i]->end_index, 16158051);
    v_i++;
    EXPECT_EQ(v_regions[v_i]->active, 1);
    EXPECT_EQ(v_regions[v_i]->tid, 22);
    EXPECT_EQ(v_regions[v_i]->start_index, 16158052);
    EXPECT_EQ(v_regions[v_i]->end_index, 16158181);
}
class TestHCActiveBaseExtensionSuite2 : public ::testing::Test
{
protected:
    static uint8_t* _buffer;
    static pMemoryPool _pool;
    static char* ref;
    static int ref_len;
    static void SetUpTestSuite()
    {
        faidx_t* fai = fai_load("/data/pipelines/WGS_bgionline/db/GRCh37/ref/GRCh37_no_alt.fna");
        ref_len = faidx_seq_len(fai, "chr22");
        int len = 0;
        ref = faidx_fetch_seq(fai, "chr22", 0, ref_len, &len);

        _buffer = new uint8_t[s_max_bufer_size]{};
        _pool = new std::pmr::monotonic_buffer_resource(_buffer, s_max_bufer_size, std::pmr::null_memory_resource());
        fai_destroy(fai);
    }

    static void TearDownTestSuite()
    {
        delete _pool;
        delete[] _buffer;
    }
    void SetUp() override
    {
        _bit = new boost::dynamic_bitset<>(1024, 0x0);
        FastaLoader::get_fasta_dict(std::string("/data/pipelines/WGS_bgionline/db/GRCh37/ref/GRCh37_no_alt.fna"), &fasta_info);
        actives = {
            {0.9999999999890296, BaseState::HC_REGION_BASES_ACTIVE_NONE, 1.5},
            {0.9913584153789726, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 10.0},
            {0.9989038086808432, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.999999956311949, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.6451612903225822, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.999999945000003, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9972510477837117, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 5.0},
            {0.9999999965297346, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9989038086808432, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 17.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999997243470975, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999986184643713, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.5908737272688458, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 1.0},
            {0.9998261049734304, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 5.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999999999944, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.6451612903225822, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999998260747, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 7.5},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 2.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 9.5},
            {0.999998902606931, BaseState::HC_REGION_BASES_ACTIVE_NONE, 2.0},
            {0.9998261049734304, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 8.5},
            {0.9999956312137954, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9863728882902218, BaseState::HC_REGION_BASES_ACTIVE_NONE, 6.0},
            {0.9999781045850392, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 9.25},
            {0.5908737272688458, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 10.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 3.0},
            {0.9999999999999997, BaseState::HC_REGION_BASES_ACTIVE_NONE, 3.1666666666666665},
            {0.9999724354619752, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.8518429787994224, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999956311947, BaseState::HC_REGION_BASES_ACTIVE_NONE, 5.0},
            {0.9999999998618463, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 13.0},
            {0.9989038086808432, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9785732631857599, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.7423758706326868, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 7.0},
            {0.9999999998618463, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999999999997, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.999999972434703, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.534276150979793, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 3.0},
            {0.999999999307591, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999999999998, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9863728882902218, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999993075915029, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 12.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.8786159134652095, BaseState::HC_REGION_BASES_ACTIVE_NONE, 6.0},
            {0.9997810889887194, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 24.0},
            {0.9998261049734304, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999965297346, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9956501981463693, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 11.0},
            {0.8786159134652095, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 21.0},
            {0.9198200872946731, BaseState::HC_REGION_BASES_ACTIVE_NONE, 4.5},
            {0.9999945000302498, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.534276150979793, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.999998260750312, BaseState::HC_REGION_BASES_ACTIVE_NONE, 1.0},
            {0.999999999307591, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9011124371889884, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 10.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 17.2},
            {0.9999999999999994, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 20.0},
            {0.9999999998260747, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 38.0},
            {0.5908737272688458, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.99999999945, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999999956312, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 47.5},
            {0.9011124371889884, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 25.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 9.25},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999998260747589, BaseState::HC_REGION_BASES_ACTIVE_NONE, 6.0},
            {0.9999999307591071, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9998618653300901, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 13.5},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 21.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 7.0},
            {0.9999999999999563, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 9.666666666666668},
            {0.99999999945, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999982607473, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9956501981463693, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999826077753639, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999999999994, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9965417357002838, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 12.0},
            {0.9999945000302498, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 14.0},
            {0.9999999991283087, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999999999999, BaseState::HC_REGION_BASES_ACTIVE_NONE, 6.0},
            {0.9999999861846248, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9863728882902218, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999999999781, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 20.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 16.555555555555557},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 24.75},
            {0.9999563138556528, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 29.0},
            {0.9999999999826075, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 23.0},
            {0.9999307638963213, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.999999972434703, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.999129067928018, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.8203721750290931, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999999999998, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.999999999956312, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 23.0},
            {0.999999999930759, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 7.0},
            {0.9999999999999826, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999450030248337, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9731741643015887, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999978104153563, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999995631196618, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9863728882902218, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 28.0},
            {0.9999999999930759, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9995633102521497, BaseState::HC_REGION_BASES_ACTIVE_NONE, 5.0},
            {0.9999978104153563, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999999826075, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999999998260747, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 23.333333333333332},
            {0.9999999999993076, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.9999945000302498, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 37.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 8.4},
            {0.9913584153789726, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 16.333333333333332},
            {0.9999999965297346, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 13.666666666666668},
            {0.9986203684754087, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
            {0.534276150979793, BaseState::HC_REGION_BASES_ACTIVE_HQ_SOFT_CLIPS, 14.0},
            {1.0, BaseState::HC_REGION_BASES_ACTIVE_NONE, 0.0},
        };
        final_likelihood = {
            {9959, 0.007595417164057127},  {9960, 0.008978368108112835},  {9961, 0.010577456073202278},   {9962, 0.012419448164646489},
            {9963, 0.014533152143095843},  {9964, 0.016949348461094374},  {9965, 0.01970067418818162},    {9966, 0.02282145314365361},
            {9967, 0.026347466977743872},  {9968, 0.0303156625889904},    {9969, 0.03507484877106492},    {9970, 0.040099152438741015},
            {9971, 0.046000260636728754},  {9972, 0.05225205667643417},   {9973, 0.05915437830743171},    {9974, 0.06674374159192466},
            {9975, 0.07505404797973889},   {9976, 0.08411576563094013},   {9977, 0.09415597076751349},    {9978, 0.10483138395778888},
            {9979, 0.11632631438180052},   {9980, 0.1286494589743702},    {9981, 0.14180172118771875},    {9982, 0.15577538173750755},
            {9983, 0.17055333579515858},   {9984, 0.1861084194231014},    {9985, 0.20240284809877462},    {9986, 0.219387789583041},
            {9987, 0.23700309211729645},   {9988, 0.25517718695926006},   {9989, 0.2741385795430685},     {9990, 0.2932287309409944},
            {9991, 0.3126057794979868},    {9992, 0.3321566976478867},    {9993, 0.3520702500565044},     {9994, 0.37165399447632785},
            {9995, 0.39134555955283146},   {9996, 0.4104411820798852},    {9997, 0.4290613617504147},     {9998, 0.44706410863446755},
            {9999, 0.4646197285517516},    {10000, 0.48102538146774565},  {10001, 0.49641028808145965},   {10002, 0.5106491338824443},
            {10003, 0.5236254537059706},   {10004, 0.5352334374388549},   {10005, 0.5453795893943912},    {10006, 0.5539842033603263},
            {10007, 0.5718696005777916},   {10008, 0.5792471536767448},   {10009, 0.5852651028775152},    {10010, 0.5899508194627383},
            {10011, 0.5933524692301155},   {10012, 0.5955387808919481},   {10013, 0.5965984383409391},    {10014, 0.5966390979921309},
            {10015, 0.5957860399175121},   {10016, 0.5941804688420869},   {10017, 0.5922888860752346},    {10018, 0.589713350652616},
            {10019, 0.5872035043438897},   {10020, 0.5843777807918756},   {10021, 0.5816851090581917},    {10022, 0.5793132347884269},
            {10023, 0.577758405017101},    {10024, 0.5766347439996187},   {10025, 0.5763742823813912},    {10026, 0.5771352921737573},
            {10027, 0.5790608003932368},   {10028, 0.5822758179826977},   {10029, 0.587068803044892},     {10030, 0.5931877983558321},
            {10031, 0.6008448910618828},   {10032, 0.6100714458491042},   {10033, 0.6208714398578594},    {10034, 0.6332207228233029},
            {10035, 0.6470667204372147},   {10036, 0.6623285945066907},   {10037, 0.6788978661890656},    {10038, 0.696639500928576},
            {10039, 0.7153934458036337},   {10040, 0.7349766019272442},   {10041, 0.7551852064578859},    {10042, 0.7757975908234812},
            {10043, 0.7965772741016847},   {10044, 0.8172763433137813},   {10045, 0.8376390658628318},    {10046, 0.8574056736677708},
            {10047, 0.8763162538975754},   {10048, 0.8941146777647826},   {10049, 0.9105524967467319},    {10050, 0.9253927349890109},
            {10051, 0.9384135075963926},   {10052, 0.949149924019041},    {10053, 0.9579857304018862},    {10054, 0.9644528078830913},
            {10055, 0.9687322836904932},   {10056, 0.9704689039468921},   {10057, 0.9692883913001331},    {10058, 0.9657240331040879},
            {10059, 0.9595140787616668},   {10060, 0.9449352791714994},   {10061, 0.9340792650717458},    {10062, 0.9205659306950469},
            {10063, 0.9045235567898795},   {10064, 0.8861039677928614},   {10065, 0.865480175567938},     {10066, 0.8428437150286497},
            {10067, 0.8184017297537115},   {10068, 0.7923738699026254},   {10069, 0.7649890671997447},    {10070, 0.7362210660335483},
            {10071, 0.7068725260591736},   {10072, 0.6766090001998479},   {10073, 0.6462305437609397},    {10074, 0.6156545524850144},
            {10075, 0.5851005118065473},   {10076, 0.5547761982875433},   {10077, 0.5248755753821721},    {10078, 0.4954083161157971},
            {10079, 0.466900656143457},    {10080, 0.43929543885376304},  {10081, 0.4127174226551636},    {10082, 0.3872719453699577},
            {10083, 0.36304481029151375},  {10084, 0.34010247285282763},  {10085, 0.31849250429096443},   {10086, 0.2982443051358316},
            {10087, 0.2793700387207099},   {10088, 0.2621771511473354},   {10089, 0.24608223387668723},   {10090, 0.2312550663820528},
            {10091, 0.21785403612043372},  {10092, 0.2056848024441905},   {10093, 0.19468699594293112},   {10094, 0.189203318077353},
            {10095, 0.18125545460698908},  {10096, 0.17444517617691843},  {10097, 0.16902395182892688},   {10098, 0.17023502241257643},
            {10099, 0.16786721017877407},  {10100, 0.17132251915190166},  {10101, 0.17211635272914833},   {10102, 0.17412381260060572},
            {10103, 0.1770586469829828},   {10104, 0.1811978876296494},   {10105, 0.18656964570492274},   {10106, 0.19321080043697367},
            {10107, 0.20116648828503317},  {10108, 0.20134777446977725},  {10109, 0.2135887900851159},    {10110, 0.22709836843533215},
            {10111, 0.24197251107200357},  {10112, 0.25830566287691936},  {10113, 0.27618876010267546},   {10114, 0.2957070934375372},
            {10115, 0.3169380168550253},   {10116, 0.3399485399362868},   {10117, 0.3647928479038828},    {10118, 0.39124832650149266},
            {10119, 0.4199016644794797},   {10120, 0.45018179494768207},  {10121, 0.4826336643930605},    {10122, 0.5169016276837454},
            {10123, 0.5529151517459534},   {10124, 0.5962310104339857},   {10125, 0.640424425130314},     {10126, 0.6830118072761212},
            {10127, 0.7274012393235351},   {10128, 0.7731661117679952},   {10129, 0.8201178176775932},    {10130, 0.8678914329390041},
            {10131, 0.916544982464507},    {10132, 0.9657315741079855},   {10133, 1.0232481262120985},    {10134, 1.0738319120725344},
            {10135, 1.1242851496348119},   {10136, 1.1743490321689831},   {10137, 1.2240786616893105},    {10138, 1.2726610615514204},
            {10139, 1.3201205662921154},   {10140, 1.3662353019103564},   {10141, 1.410801936351903},     {10142, 1.4536388485183724},
            {10143, 1.4948935349107861},   {10144, 1.5338827473280163},   {10145, 1.5707606831809586},    {10146, 1.605454522599498},
            {10147, 1.6379203587328914},   {10148, 1.6681425208638978},   {10149, 1.6961321698845175},    {10150, 1.7219251969998854},
            {10151, 1.7455794780158205},   {10152, 1.7671715559460566},   {10153, 1.786792843231057},     {10154, 1.8045454509203889},
            {10155, 1.8205377651368166},   {10156, 1.8346184274514474},   {10157, 1.8471989440897048},    {10158, 1.858634472223694},
            {10159, 1.8684427479536871},   {10160, 1.8770033060110305},   {10161, 1.8846283306709706},    {10162, 1.8910443193032402},
            {10163, 1.8962662629097742},   {10164, 1.900285172392547},    {10165, 1.9030677994528544},    {10166, 1.9045571654668654},
            {10167, 1.9046738851312035},   {10168, 1.903318247602609},    {10169, 1.9003729950342487},    {10170, 1.8957067175874045},
            {10171, 1.8891777658454083},   {10172, 1.8806385666494267},   {10173, 1.8699402171677735},    {10174, 1.856937224819857},
            {10175, 1.8414922576768287},   {10176, 1.823480771180387},    {10177, 1.8027953823381024},    {10178, 1.7793498717103369},
            {10179, 1.7533138804544806},   {10180, 1.7245457516308105},   {10181, 1.6929832439597865},    {10182, 1.6630237795136062},
            {10183, 1.6265228433868208},   {10184, 1.587515203236697},    {10185, 1.5464586269629872},    {10186, 1.5032786421974875},
            {10187, 1.45819371878974},     {10188, 1.4114512461780537},   {10189, 1.3627515494762128},    {10190, 1.313375255881127},
            {10191, 1.2631572011605157},   {10192, 1.2126672114969836},   {10193, 1.1617294821991369},    {10194, 1.110938316483682},
            {10195, 1.056703348399989},    {10196, 1.0078349864774812},   {10197, 0.960041762493279},     {10198, 0.9136842639643731},
            {10199, 0.8718346415052194},   {10200, 0.8313962172027746},   {10201, 0.7888403930689383},    {10202, 0.7540119419955492},
            {10203, 0.7219952559562798},   {10204, 0.6932366898701064},   {10205, 0.6676284299169236},    {10206, 0.6602833748273808},
            {10207, 0.6442317669959774},   {10208, 0.6318643925899167},   {10209, 0.6235574844092464},    {10210, 0.6193972467006661},
            {10211, 0.6197535739415014},   {10212, 0.6312246447954477},   {10213, 0.6529142194104897},    {10214, 0.6697729540285356},
            {10215, 0.6911887330824179},   {10216, 0.717415369911824},    {10217, 0.7487621887707666},    {10218, 0.7848141640148626},
            {10219, 0.8255011189863531},   {10220, 0.8709192615573262},   {10221, 0.9210108648643885},    {10222, 0.9757034546455874},
            {10223, 1.0349089812058672},   {10224, 1.0985226872268359},   {10225, 1.1617652128783222},    {10226, 1.2314314764111836},
            {10227, 1.3087391232219459},   {10228, 1.3894029340523053},   {10229, 1.4738502749769018},    {10230, 1.561291699042582},
            {10231, 1.657626322330504},    {10232, 1.751920309722004},    {10233, 1.848736116023796},     {10234, 1.940985945054229},
            {10235, 2.043578792656984},    {10236, 2.1471683926023113},   {10237, 2.262504699012358},     {10238, 2.369118005870318},
            {10239, 2.4762820737345566},   {10240, 2.5832154055158822},   {10241, 2.7021895296004566},    {10242, 2.83351551539188},
            {10243, 2.944133279122229},    {10244, 3.053175260331629},    {10245, 3.160944260493312},     {10246, 3.266742980979557},
            {10247, 3.370508022120732},    {10248, 3.4713238100082053},   {10249, 3.5691316486340807},    {10250, 3.663646589785111},
            {10251, 3.754623772197264},    {10252, 3.8418625431841966},   {10253, 3.95479248372809},      {10254, 4.039951715365717},
            {10255, 4.12172306926507},     {10256, 4.200454474581764},    {10257, 4.276316381353431},     {10258, 4.3495342607900875},
            {10259, 4.420383953000621},    {10260, 4.48918550856649},     {10261, 4.556295597064876},     {10262, 4.622098599067403},
            {10263, 4.686996540267831},    {10264, 4.7513980658651604},   {10265, 4.831587985194831},     {10266, 4.899156868761072},
            {10267, 4.967852481666573},    {10268, 5.038050458292688},    {10269, 5.110077600754671},     {10270, 5.184200709739613},
            {10271, 5.266532923521349},    {10272, 5.3467752173212855},   {10273, 5.429693876004559},     {10274, 5.515258994880274},
            {10275, 5.603035674805158},    {10276, 5.693058061371116},    {10277, 5.785313587176017},     {10278, 5.879130365995598},
            {10279, 5.982104892634304},    {10280, 6.091858162621224},    {10281, 6.195361953996137},     {10282, 6.294807822052715},
            {10283, 6.395678685428714},    {10284, 6.495007655518584},    {10285, 6.5921257326404294},    {10286, 6.686056390771785},
            {10287, 6.7760854310840575},   {10288, 6.861766699240385},    {10289, 6.942423608617711},     {10290, 7.017993984444347},
            {10291, 7.086886393482179},    {10292, 7.149200118352939},    {10293, 7.211820615872601},     {10294, 7.260827196198579},
            {10295, 7.311189949328254},    {10296, 7.346665867759908},    {10297, 7.374207453200605},     {10298, 7.394145909476292},
            {10299, 7.40663647558972},     {10300, 7.405571392678285},    {10301, 7.417244093246742},     {10302, 7.4121895499264685},
            {10303, 7.41072851820811},     {10304, 7.410458514992039},    {10305, 7.392916596488708},     {10306, 7.389903533507818},
            {10307, 7.37082921096081},     {10308, 7.352441604303939},    {10309, 7.333151000950945},     {10310, 7.313451988806653},
            {10311, 7.294131384883758},    {10312, 7.275685950949027},    {10313, 7.253725793232677},     {10314, 7.231125357070171},
            {10315, 7.2227893992466},      {10316, 7.218091565549524},    {10317, 7.217293764690536},     {10318, 7.220607373123127},
            {10319, 7.228851658625844},    {10320, 7.242328865959447},    {10321, 7.261098979250612},     {10322, 7.285300666660875},
            {10323, 7.314983388038879},    {10324, 7.350106385465562},    {10325, 7.390849559276603},     {10326, 7.436164538942395},
            {10327, 7.4868780421922745},   {10328, 7.5419701512249},      {10329, 7.600752347871795},     {10330, 7.662606459410429},
            {10331, 7.727444313824387},    {10332, 7.789274737888631},    {10333, 7.857994919290291},     {10334, 7.926854024343794},
            {10335, 7.994929643304585},    {10336, 8.060981266241853},    {10337, 8.124859022086225},     {10338, 8.190107102461173},
            {10339, 8.253827840512393},    {10340, 8.308232612259934},    {10341, 8.355985359537094},     {10342, 8.385073793698773},
            {10343, 8.398161634704367},    {10344, 8.424766179456684},    {10345, 8.440496443278827},     {10346, 8.46168982092401},
            {10347, 8.456259456274903},    {10348, 8.438195641511445},    {10349, 8.407725574898425},     {10350, 8.364322152686665},
            {10351, 8.30790059514106},     {10352, 8.238514037157742},    {10353, 8.156669441307919},     {10354, 8.037613346291494},
            {10355, 7.935025871662907},    {10356, 7.820806787672607},    {10357, 7.695512200981611},     {10358, 7.560093989468038},
            {10359, 7.415607473785051},    {10360, 7.2631972800624185},   {10361, 7.104081056982687},     {10362, 6.939531377690349},
            {10363, 6.7708562109770805},   {10364, 6.599378389776083},    {10365, 6.426414536785005},     {10366, 6.2399188000163175},
            {10367, 6.069979271587964},    {10368, 5.901934481877999},    {10369, 5.736913309997715},     {10370, 5.575937223101602},
            {10371, 5.419905990947526},    {10372, 5.264617901877587},    {10373, 5.121182086693122},     {10374, 4.984478496086718},
            {10375, 4.85483963834931},     {10376, 4.7327068259524046},   {10377, 4.618117440112164},     {10378, 4.510449429890534},
            {10379, 4.409461531070393},    {10380, 4.308244509771594},    {10381, 4.224675625981533},     {10382, 4.143973798883276},
            {10383, 4.072730676565122},    {10384, 4.000416536296433},    {10385, 3.9371452671149325},    {10386, 3.8766611716265262},
            {10387, 3.818616277723158},    {10388, 3.7854070776640394},   {10389, 3.7343299091350897},    {10390, 3.6842434167848763},
            {10391, 3.6394388488317504},   {10392, 3.6009664933437344},   {10393, 3.5623693389346016},    {10394, 3.51086733581339},
            {10395, 3.4675973844681764},   {10396, 3.416763376462479},    {10397, 3.3749738879187574},    {10398, 3.334089022529401},
            {10399, 3.2939454613627053},   {10400, 3.255331925107067},    {10401, 3.218794556332832},     {10402, 3.1744619418841764},
            {10403, 3.145596992779367},    {10404, 3.112069818977142},    {10405, 3.0801259874812583},    {10406, 3.0679241016176504},
            {10407, 3.045508970984109},    {10408, 3.0346362654373316},   {10409, 3.0441762576675098},    {10410, 3.060102934240615},
            {10411, 3.082917802722339},    {10412, 3.113002730475652},    {10413, 3.150610309902973},     {10414, 3.195594797993847},
            {10415, 3.2484952101149887},   {10416, 3.3088291666288288},   {10417, 3.3762796051137585},    {10418, 3.4552100772170933},
            {10419, 3.5362712941977694},   {10420, 3.622797544681223},    {10421, 3.7139495960747566},    {10422, 3.80877741989614},
            {10423, 3.9062336980766306},   {10424, 4.005189155512808},    {10425, 4.104449459664519},     {10426, 4.202511920567046},
            {10427, 4.298673185915914},    {10428, 4.391084515014524},    {10429, 4.478832287537031},     {10430, 4.560837761007655},
            {10431, 4.635665538487292},    {10432, 4.702205055556334},    {10433, 4.7594323957789975},    {10434, 4.806426028028025},
            {10435, 4.842380707562856},    {10436, 4.866619283109595},    {10437, 4.87860219657217},      {10438, 4.8776730385589415},
            {10439, 4.851862333285298},    {10440, 4.8234268972296706},   {10441, 4.786052689719501},     {10442, 4.7359391018520665},
            {10443, 4.673166803134147},    {10444, 4.5979520161152365},   {10445, 4.511221949349278},     {10446, 4.413722825218796},
            {10447, 4.29184678884155},     {10448, 4.178001737198791},    {10449, 4.055712131315257},     {10450, 3.926052411216202},
            {10451, 3.790123487835214},    {10452, 3.6490372102588564},   {10453, 3.5039013058197632},    {10454, 3.355543602460454},
            {10455, 3.2053259453541716},   {10456, 3.0545170150610943},   {10457, 2.903766619974713},     {10458, 2.7539720874284908},
            {10459, 2.605959534049593},    {10460, 2.4604780878347245},   {10461, 2.3181958066553965},    {10462, 2.179697259339682},
            {10463, 2.045482698323864},    {10464, 1.915968720021401},    {10465, 1.7914902812387707},    {10466, 1.6723039176880135},
            {10467, 1.5585919941989115},   {10468, 1.4504678056999567},   {10469, 1.3479813432941758},    {10470, 1.2511255404984825},
            {10471, 1.1598428204751219},   {10472, 1.0740317752649888},   {10473, 0.9935538219350206},    {10474, 0.9182396974133396},
            {10475, 0.8478956728072177},   {10476, 0.7823093883829296},   {10477, 0.721255231362118},     {10478, 0.6642377270543837},
            {10479, 0.6113229472607357},   {10480, 0.5625276191283928},   {10481, 0.517306505232504},     {10482, 0.4631418126995319},
            {10483, 0.4261352697713353},   {10484, 0.39178598090774835},  {10485, 0.36018564621701127},   {10486, 0.33086803537561776},
            {10487, 0.3036856621110808},   {10488, 0.2782372969968985},   {10489, 0.23534620520657765},   {10490, 0.21673828606036621},
            {10491, 0.1993156890881207},   {10492, 0.17884189152175323},  {10493, 0.15602270534332688},   {10494, 0.1369803679182375},
            {10495, 0.12679948315183476},  {10496, 0.11683178686833434},  {10497, 0.10765646583797031},   {10498, 0.09897198334483462},
            {10499, 0.09078234253599703},  {10500, 0.08308664170639225},  {10501, 0.07587962080761436},   {10502, 0.06915221719339165},
            {10503, 0.06289211828969454},  {10504, 0.057084300390814045}, {10505, 0.051711544419826984},  {10506, 0.046754921187036204},
            {10507, 0.042194240373093106}, {10508, 0.038008459101573265}, {10509, 0.03417604750409809},   {10510, 0.03067531008404638},
            {10511, 0.027484662926131366}, {10512, 0.024582867861432066}, {10513, 0.02194922557226737},   {10514, 0.019563730307801758},
            {10515, 0.017407189385458356}, {10516, 0.015461310986671223}, {10517, 0.013708763934169754},  {10518, 0.012133213180885177},
            {10519, 0.006668068905750597}, {10520, 0.006062817277264954}, {10521, 0.005493462079459589},  {10522, 0.004960380977495005},
            {10523, 0.004463558043502518}, {10524, 0.00400262211775718},  {10525, 0.0035768872122144434}, {10526, 0.0031853939590090648},
            {10527, 0.002826951183871018}, {10528, 0.002500176777813138}, {10529, 0.002203537145472618},
        };
        actives_site = {10001, 10009, 10019, 10021, 10027, 10039, 10043, 10045, 10049, 10057, 10067, 10069, 10073, 10079, 10105,
                        10106, 10108, 10109, 10138, 10140, 10144, 10146, 10147, 10148, 10149, 10150, 10151, 10152, 10174, 10175,
                        10177, 10178, 10179, 10180, 10181, 10182, 10183, 10187, 10193, 10229, 10230, 10231, 10232, 10235, 10236,
                        10237, 10238, 10240, 10241, 10242, 10247, 10248, 10249, 10250, 10252, 10253, 10254, 10255, 10256, 10257,
                        10261, 10262, 10263, 10264, 10267, 10268, 10275, 10279, 10281, 10285, 10287, 10291, 10292, 10293, 10297,
                        10303, 10304, 10315, 10321, 10322, 10323, 10324, 10327, 10328, 10329, 10330, 10331, 10333, 10334, 10335,
                        10336, 10340, 10342, 10343, 10345, 10346, 10348, 10349, 10350, 10351, 10352, 10353, 10354, 10356, 10357,
                        10363, 10375, 10377, 10378, 10387, 10388, 10389, 10390, 10391, 10393, 10394, 10395, 10396, 10403, 10404,
                        10427, 10428, 10431, 10432, 10433, 10437, 10438, 10439, 10440, 10441, 10442, 10443, 10445, 10468, 10492};
    }
    contig_info_t fasta_info;
    std::vector<hts_pos_t> actives_site;
    std::vector<std::pair<hts_pos_t, double>> final_likelihood;
    void TearDown() override { delete _bit; }
    std::vector<ActiveResult> actives;
    boost::dynamic_bitset<>* _bit;
};
uint8_t* TestHCActiveBaseExtensionSuite2::_buffer = nullptr;
pMemoryPool TestHCActiveBaseExtensionSuite2::_pool = nullptr;
int TestHCActiveBaseExtensionSuite2::ref_len = 0;
char* TestHCActiveBaseExtensionSuite2::ref = nullptr;

TEST_F(TestHCActiveBaseExtensionSuite2, test_incoporate_case1)
{
    int stripe = 50;
    for (int i = 0; i < 100; i++) _bit->set(i, true);
    ActiveRegionEngine engine(5, 10, nullptr, &fasta_info);

    std::shared_ptr<ActiveBase> base;
    std::vector<std::shared_ptr<ActiveBase>> v_bases;
    int work_id = 0;
    for (hts_pos_t iter = 9959; iter < 10529; iter += stripe, work_id++) {
        if (iter + stripe < 10529)
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, iter + stripe, _bit, work_id, ref, ref_len);
        else
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, 10530, _bit, work_id, ref, ref_len);
        v_bases.push_back(base);
    }

    EXPECT_EQ(actives_site.size(), actives.size());
    // 每个位点设置active value
    for (size_t i = 0; i < actives_site.size(); i++) {
        for (auto base : v_bases) {
            int offset = base->get_actual_offset(21, actives_site[i]);
            if (offset >= 0) {
                ActiveResult& result = base->get_active_actual_result(offset);
                result = actives[i];
                break;
            }
        }
    }
    // 看是否设置成功
    EXPECT_EQ(actives_site.size(), actives.size());
    EXPECT_EQ(work_id, 12);

    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    ring_buffer.reset(21, 9959);

    ActiveRegionIndexRecord& record = engine.get_record_stauts();
    for (auto base : v_bases) {
        engine.dummy_append(base);
        record.current_work_id = base->get_work_id();
        engine.incorporate_status();
    }
    // ActiveRegionIndexRecord& record = engine.get_record_stauts();
    EXPECT_EQ(ring_buffer.get_start(), 9959);
    for (auto pair_likelihood : final_likelihood) {
        double likelihood = ring_buffer.get_likelihood(21, pair_likelihood.first);
        ASSERT_NEAR(likelihood, pair_likelihood.second, 1E-10);
    }
}

TEST_F(TestHCActiveBaseExtensionSuite2, test_all_case1)
{
    int stripe = 50;
    for (int i = 0; i < 100; i++) _bit->set(i, true);
    ActiveRegionEngine engine(50, 300, nullptr, &fasta_info);

    std::shared_ptr<ActiveBase> base;
    std::vector<std::shared_ptr<ActiveBase>> v_bases;
    int work_id = 0;
    for (hts_pos_t iter = 9959; iter < 10529; iter += stripe, work_id++) {
        if (iter + stripe < 10529)
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, iter + stripe, _bit, work_id, ref, ref_len);
        else
            base = std::make_shared<HcActiveBase>(_pool, 2, 21, iter, 10530, _bit, work_id, ref, ref_len);
        v_bases.push_back(base);
    }

    EXPECT_EQ(actives_site.size(), actives.size());
    // 每个位点设置active value
    for (size_t i = 0; i < actives_site.size(); i++) {
        for (auto base : v_bases) {
            int offset = base->get_actual_offset(21, actives_site[i]);
            if (offset >= 0) {
                ActiveResult& result = base->get_active_actual_result(offset);
                result = actives[i];
                break;
            }
        }
    }
    AcitveRegionRingBuffer& ring_buffer = engine.get_ring_buffer();
    ring_buffer.reset(21, 9959);
    engine.update_finish(v_bases.size() - 1);
    for (auto base : v_bases) {
        engine.append(base);
    }
    std::vector<p_hc_region_active_storage> v_regions;
    p_hc_region_active_storage region = nullptr;
    while ((region = engine.poll()) != nullptr) {
        if (region->active)
            v_regions.push_back(region);
        else
            free(region);
    }
    EXPECT_EQ(v_regions.size(), 4);
    EXPECT_EQ(v_regions[0]->active, 1);
    EXPECT_EQ(v_regions[0]->tid, 21);
    EXPECT_EQ(v_regions[0]->start_index, 9959);
    EXPECT_EQ(v_regions[0]->end_index, 10099);
    EXPECT_EQ(v_regions[1]->active, 1);
    EXPECT_EQ(v_regions[1]->tid, 21);
    EXPECT_EQ(v_regions[1]->start_index, 10100);
    EXPECT_EQ(v_regions[1]->end_index, 10210);
    EXPECT_EQ(v_regions[2]->active, 1);
    EXPECT_EQ(v_regions[2]->tid, 21);
    EXPECT_EQ(v_regions[2]->start_index, 10211);
    EXPECT_EQ(v_regions[2]->end_index, 10408);
    EXPECT_EQ(v_regions[3]->active, 1);
    EXPECT_EQ(v_regions[3]->tid, 21);
    EXPECT_EQ(v_regions[3]->start_index, 10409);
    EXPECT_EQ(v_regions[3]->end_index, 10529);
}